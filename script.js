function startRecognition() {
  if (!('webkitSpeechRecognition' in window)) {
    alert('Speech recognition not supported!');
    return;
  }

  const recognition = new webkitSpeechRecognition();
  recognition.lang = 'en-IN';
  recognition.onresult = function (event) {
    const transcript = event.results[0][0].transcript;
    document.getElementById('output').textContent = 'You said: ' + transcript;
  };
  recognition.start();
}

function toggleVoiceMode() {
  alert("Voice-only mode not yet implemented.");
}

function toggleHighContrast() {
  document.body.classList.toggle("high-contrast");
}

function toggleLargeText() {
  document.body.classList.toggle("large-text");
}

function toggleVoiceMode() {
  alert("Voice mode is toggled (to be implemented).");
}
function toggleHighContrast() {
  document.body.classList.toggle("high-contrast");
}
function toggleLargeText() {
  document.body.classList.toggle("large-text");
}
function toggleVoiceMode() {
  alert("Voice mode toggled (to be implemented).");
}
function toggleHighContrast() {
  document.body.classList.toggle("high-contrast");
}
function toggleLargeText() {
  document.body.classList.toggle("large-text");
}

function changeLanguage() {
  const lang = document.getElementById("language-select").value;

  const translations = {
    en: {
      title: "GramaSwasthya",
      greeting: "üôè Namaste!",
      sub: "How can I help you today?",
      speak: "Tap to speak",
      symptoms: "Check Symptoms",
      records: "Health Records",
      sos: "SOS",
      emergency: "Emergency Services",
      nav: ["Home", "Symptoms", "Records", "Emergency", "Reminders"]
    },
    hi: {
      title: "‡§ó‡•ç‡§∞‡§æ‡§Æ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø",
      greeting: "üôè ‡§®‡§Æ‡§∏‡•ç‡§§‡•á!",
      sub: "‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?",
      speak: "‡§¨‡•ã‡§≤‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ü‡•à‡§™ ‡§ï‡§∞‡•á‡§Ç",
      symptoms: "‡§≤‡§ï‡•ç‡§∑‡§£ ‡§ú‡§æ‡§®‡•á‡§Ç",
      records: "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü",
      sos: "‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§Æ‡§¶‡§¶",
      emergency: "‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤ ‡§∏‡•á‡§µ‡§æ‡§è‡§Å",
      nav: ["‡§π‡•ã‡§Æ", "‡§≤‡§ï‡•ç‡§∑‡§£", "‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü", "‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤", "‡§∞‡§ø‡§Æ‡§æ‡§á‡§Ç‡§°‡§∞"]
    },
    te: {
      title: "‡∞ó‡±ç‡∞∞‡∞æ‡∞Æ‡∞∏‡±ç‡∞µ‡∞∏‡±ç‡∞§‡±ç‡∞Ø",
      greeting: "üôè ‡∞®‡∞Æ‡∞∏‡±ç‡∞§‡±á!",
      sub: "‡∞à ‡∞∞‡±ã‡∞ú‡±Å ‡∞®‡±á‡∞®‡±Å ‡∞é‡∞≤‡∞æ ‡∞∏‡∞π‡∞æ‡∞Ø‡∞™‡∞°‡∞ó‡∞≤‡∞®‡±Å?",
      speak: "‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡∞ü‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞ü‡∞æ‡∞™‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
      symptoms: "‡∞≤‡∞ï‡±ç‡∞∑‡∞£‡∞æ‡∞≤‡±Å",
      records: "‡∞Ü‡∞∞‡±ã‡∞ó‡±ç‡∞Ø ‡∞®‡∞ø‡∞µ‡±á‡∞¶‡∞ø‡∞ï‡∞≤‡±Å",
      sos: "‡∞é‡∞∏‡±ç.‡∞ì.‡∞é‡∞∏‡±ç",
      emergency: "‡∞Ö‡∞§‡±ç‡∞Ø‡∞µ‡∞∏‡∞∞ ‡∞∏‡±á‡∞µ‡∞≤‡±Å",
      nav: ["‡∞π‡±ã‡∞Æ‡±ç", "‡∞≤‡∞ï‡±ç‡∞∑‡∞£‡∞æ‡∞≤‡±Å", "‡∞®‡∞ø‡∞µ‡±á‡∞¶‡∞ø‡∞ï‡∞≤‡±Å", "‡∞Ö‡∞§‡±ç‡∞Ø‡∞µ‡∞∏‡∞∞‡∞Ç", "‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞™‡±Å‡∞≤‡±Å"]
    },
    kn: {
      title: "‡≤ó‡≥ç‡≤∞‡≤æ‡≤Æ‡≤∏‡≥ç‡≤µ‡≤æ‡≤∏‡≥ç‡≤•‡≥ç‡≤Ø",
      greeting: "üôè ‡≤®‡≤Æ‡≤∏‡≥ç‡≤ï‡≤æ‡≤∞!",
      sub: "‡≤à ‡≤¶‡≤ø‡≤® ‡≤®‡≤æ‡≤®‡≥Å ‡≤π‡≥á‡≤ó‡≥Ü ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≤¨‡≤π‡≥Å‡≤¶‡≥Å?",
      speak: "‡≤Æ‡≤æ‡≤§‡≤®‡≤æ‡≤°‡≤≤‡≥Å ‡≤ü‡≥ç‡≤Ø‡≤æ‡≤™‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø",
      symptoms: "‡≤≤‡≤ï‡≥ç‡≤∑‡≤£‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≤∞‡≤ø‡≤∂‡≥Ä‡≤≤‡≤ø‡≤∏‡≤ø",
      records: "‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø ‡≤¶‡≤æ‡≤ñ‡≤≤‡≥Ü‡≤ó‡≤≥‡≥Å",
      sos: "‡≤é‡≤∏‡≥ç‡≤í‡≤é‡≤∏‡≥ç",
      emergency: "‡≤§‡≥Å‡≤∞‡≥ç‡≤§‡≥Å ‡≤∏‡≥á‡≤µ‡≥Ü‡≤ó‡≤≥‡≥Å",
      nav: ["‡≤Æ‡≥Å‡≤ñ‡≤™‡≥Å‡≤ü", "‡≤≤‡≤ï‡≥ç‡≤∑‡≤£‡≤ó‡≤≥‡≥Å", "‡≤¶‡≤æ‡≤ñ‡≤≤‡≥Ü‡≤ó‡≤≥‡≥Å", "‡≤§‡≥Å‡≤∞‡≥ç‡≤§‡≥Å", "‡≤ú‡≥ç‡≤û‡≤æ‡≤™‡≤®‡≥Ü‡≤ó‡≤≥‡≥Å"]
    }
  };

  const t = translations[lang];
  document.getElementById("title").textContent = t.title;
  document.getElementById("greeting-title").textContent = t.greeting;
  document.getElementById("greeting-sub").innerHTML = t.sub;
  document.getElementById("speak-text").textContent = t.speak;
  document.getElementById("symptoms").innerHTML = `ü©∫<br>${t.symptoms}`;
  document.getElementById("records").innerHTML = `üìã<br>${t.records}`;
  document.getElementById("sos").innerHTML = `üö®<br>${t.sos}`;
  document.getElementById("emergency").innerHTML = `üÜò<br>${t.emergency}`;
  const navs = ["nav-home", "nav-symptoms", "nav-records", "nav-emergency", "nav-reminders"];
  navs.forEach((id, i) => document.getElementById(id).innerHTML = `${document.getElementById(id).innerHTML.split("<br>")[0]}<br>${t.nav[i]}`);
}
